// Generated by rstantools.  Do not edit by hand.

/*
    DiffFracSeq is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    DiffFracSeq is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with DiffFracSeq.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_DiffFracSeq_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_DiffFracSeq");
    reader.add_event(90, 88, "end", "model_DiffFracSeq");
    return reader;
}
#include <stan_meta_header.hpp>
class model_DiffFracSeq
  : public stan::model::model_base_crtp<model_DiffFracSeq> {
private:
        int NRNA;
        int NREP;
        int NCON;
        std::vector<std::vector<std::vector<int> > > tot_obs;
        std::vector<std::vector<std::vector<int> > > sup_obs;
        std::vector<std::vector<std::vector<int> > > pel_obs;
public:
    model_DiffFracSeq(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_DiffFracSeq(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_DiffFracSeq_namespace::model_DiffFracSeq";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "NRNA", "int", context__.to_vec());
            NRNA = int(0);
            vals_i__ = context__.vals_i("NRNA");
            pos__ = 0;
            NRNA = vals_i__[pos__++];
            check_greater_or_equal(function__, "NRNA", NRNA, 1);
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "NREP", "int", context__.to_vec());
            NREP = int(0);
            vals_i__ = context__.vals_i("NREP");
            pos__ = 0;
            NREP = vals_i__[pos__++];
            check_greater_or_equal(function__, "NREP", NREP, 1);
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "NCON", "int", context__.to_vec());
            NCON = int(0);
            vals_i__ = context__.vals_i("NCON");
            pos__ = 0;
            NCON = vals_i__[pos__++];
            check_greater_or_equal(function__, "NCON", NCON, 1);
            current_statement_begin__ = 19;
            validate_non_negative_index("tot_obs", "NCON", NCON);
            validate_non_negative_index("tot_obs", "NREP", NREP);
            validate_non_negative_index("tot_obs", "NRNA", NRNA);
            context__.validate_dims("data initialization", "tot_obs", "int", context__.to_vec(NCON,NREP,NRNA));
            tot_obs = std::vector<std::vector<std::vector<int> > >(NCON, std::vector<std::vector<int> >(NREP, std::vector<int>(NRNA, int(0))));
            vals_i__ = context__.vals_i("tot_obs");
            pos__ = 0;
            size_t tot_obs_k_0_max__ = NCON;
            size_t tot_obs_k_1_max__ = NREP;
            size_t tot_obs_k_2_max__ = NRNA;
            for (size_t k_2__ = 0; k_2__ < tot_obs_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < tot_obs_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < tot_obs_k_0_max__; ++k_0__) {
                        tot_obs[k_0__][k_1__][k_2__] = vals_i__[pos__++];
                    }
                }
            }
            size_t tot_obs_i_0_max__ = NCON;
            size_t tot_obs_i_1_max__ = NREP;
            size_t tot_obs_i_2_max__ = NRNA;
            for (size_t i_0__ = 0; i_0__ < tot_obs_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < tot_obs_i_1_max__; ++i_1__) {
                    for (size_t i_2__ = 0; i_2__ < tot_obs_i_2_max__; ++i_2__) {
                        check_greater_or_equal(function__, "tot_obs[i_0__][i_1__][i_2__]", tot_obs[i_0__][i_1__][i_2__], 0);
                    }
                }
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("sup_obs", "NCON", NCON);
            validate_non_negative_index("sup_obs", "NREP", NREP);
            validate_non_negative_index("sup_obs", "NRNA", NRNA);
            context__.validate_dims("data initialization", "sup_obs", "int", context__.to_vec(NCON,NREP,NRNA));
            sup_obs = std::vector<std::vector<std::vector<int> > >(NCON, std::vector<std::vector<int> >(NREP, std::vector<int>(NRNA, int(0))));
            vals_i__ = context__.vals_i("sup_obs");
            pos__ = 0;
            size_t sup_obs_k_0_max__ = NCON;
            size_t sup_obs_k_1_max__ = NREP;
            size_t sup_obs_k_2_max__ = NRNA;
            for (size_t k_2__ = 0; k_2__ < sup_obs_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < sup_obs_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < sup_obs_k_0_max__; ++k_0__) {
                        sup_obs[k_0__][k_1__][k_2__] = vals_i__[pos__++];
                    }
                }
            }
            size_t sup_obs_i_0_max__ = NCON;
            size_t sup_obs_i_1_max__ = NREP;
            size_t sup_obs_i_2_max__ = NRNA;
            for (size_t i_0__ = 0; i_0__ < sup_obs_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < sup_obs_i_1_max__; ++i_1__) {
                    for (size_t i_2__ = 0; i_2__ < sup_obs_i_2_max__; ++i_2__) {
                        check_greater_or_equal(function__, "sup_obs[i_0__][i_1__][i_2__]", sup_obs[i_0__][i_1__][i_2__], 0);
                    }
                }
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("pel_obs", "NCON", NCON);
            validate_non_negative_index("pel_obs", "NREP", NREP);
            validate_non_negative_index("pel_obs", "NRNA", NRNA);
            context__.validate_dims("data initialization", "pel_obs", "int", context__.to_vec(NCON,NREP,NRNA));
            pel_obs = std::vector<std::vector<std::vector<int> > >(NCON, std::vector<std::vector<int> >(NREP, std::vector<int>(NRNA, int(0))));
            vals_i__ = context__.vals_i("pel_obs");
            pos__ = 0;
            size_t pel_obs_k_0_max__ = NCON;
            size_t pel_obs_k_1_max__ = NREP;
            size_t pel_obs_k_2_max__ = NRNA;
            for (size_t k_2__ = 0; k_2__ < pel_obs_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < pel_obs_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < pel_obs_k_0_max__; ++k_0__) {
                        pel_obs[k_0__][k_1__][k_2__] = vals_i__[pos__++];
                    }
                }
            }
            size_t pel_obs_i_0_max__ = NCON;
            size_t pel_obs_i_1_max__ = NREP;
            size_t pel_obs_i_2_max__ = NRNA;
            for (size_t i_0__ = 0; i_0__ < pel_obs_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < pel_obs_i_1_max__; ++i_1__) {
                    for (size_t i_2__ = 0; i_2__ < pel_obs_i_2_max__; ++i_2__) {
                        check_greater_or_equal(function__, "pel_obs[i_0__][i_1__][i_2__]", pel_obs[i_0__][i_1__][i_2__], 0);
                    }
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 25;
            num_params_r__ += 1;
            current_statement_begin__ = 26;
            validate_non_negative_index("tot_scale_factor", "NCON", NCON);
            validate_non_negative_index("tot_scale_factor", "NREP", NREP);
            num_params_r__ += ((1 * NCON) * NREP);
            current_statement_begin__ = 27;
            validate_non_negative_index("sup_scale_factor", "NCON", NCON);
            validate_non_negative_index("sup_scale_factor", "NREP", NREP);
            num_params_r__ += ((1 * NCON) * NREP);
            current_statement_begin__ = 28;
            validate_non_negative_index("pel_scale_factor", "NCON", NCON);
            validate_non_negative_index("pel_scale_factor", "NREP", NREP);
            num_params_r__ += ((1 * NCON) * NREP);
            current_statement_begin__ = 31;
            validate_non_negative_index("gene_count_condition", "NRNA", NRNA);
            validate_non_negative_index("gene_count_condition", "NCON", NCON);
            num_params_r__ += (NRNA * NCON);
            current_statement_begin__ = 32;
            validate_non_negative_index("pel_count_condition", "NRNA", NRNA);
            validate_non_negative_index("pel_count_condition", "NCON", NCON);
            num_params_r__ += (NRNA * NCON);
            current_statement_begin__ = 35;
            num_params_r__ += 1;
            current_statement_begin__ = 36;
            num_params_r__ += 1;
            current_statement_begin__ = 39;
            validate_non_negative_index("phi", "3", 3);
            num_params_r__ += (1 * 3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_DiffFracSeq() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 25;
        if (!(context__.contains_r("scale_factor_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable scale_factor_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("scale_factor_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "scale_factor_mean", "double", context__.to_vec());
        double scale_factor_mean(0);
        scale_factor_mean = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(scale_factor_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable scale_factor_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("tot_scale_factor")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tot_scale_factor missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tot_scale_factor");
        pos__ = 0U;
        validate_non_negative_index("tot_scale_factor", "NCON", NCON);
        validate_non_negative_index("tot_scale_factor", "NREP", NREP);
        context__.validate_dims("parameter initialization", "tot_scale_factor", "double", context__.to_vec(NCON,NREP));
        std::vector<std::vector<double> > tot_scale_factor(NCON, std::vector<double>(NREP, double(0)));
        size_t tot_scale_factor_k_0_max__ = NCON;
        size_t tot_scale_factor_k_1_max__ = NREP;
        for (size_t k_1__ = 0; k_1__ < tot_scale_factor_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < tot_scale_factor_k_0_max__; ++k_0__) {
                tot_scale_factor[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t tot_scale_factor_i_0_max__ = NCON;
        size_t tot_scale_factor_i_1_max__ = NREP;
        for (size_t i_0__ = 0; i_0__ < tot_scale_factor_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < tot_scale_factor_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_lb_unconstrain(0, tot_scale_factor[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tot_scale_factor: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("sup_scale_factor")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sup_scale_factor missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sup_scale_factor");
        pos__ = 0U;
        validate_non_negative_index("sup_scale_factor", "NCON", NCON);
        validate_non_negative_index("sup_scale_factor", "NREP", NREP);
        context__.validate_dims("parameter initialization", "sup_scale_factor", "double", context__.to_vec(NCON,NREP));
        std::vector<std::vector<double> > sup_scale_factor(NCON, std::vector<double>(NREP, double(0)));
        size_t sup_scale_factor_k_0_max__ = NCON;
        size_t sup_scale_factor_k_1_max__ = NREP;
        for (size_t k_1__ = 0; k_1__ < sup_scale_factor_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < sup_scale_factor_k_0_max__; ++k_0__) {
                sup_scale_factor[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t sup_scale_factor_i_0_max__ = NCON;
        size_t sup_scale_factor_i_1_max__ = NREP;
        for (size_t i_0__ = 0; i_0__ < sup_scale_factor_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < sup_scale_factor_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_unconstrain(sup_scale_factor[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sup_scale_factor: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 28;
        if (!(context__.contains_r("pel_scale_factor")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pel_scale_factor missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pel_scale_factor");
        pos__ = 0U;
        validate_non_negative_index("pel_scale_factor", "NCON", NCON);
        validate_non_negative_index("pel_scale_factor", "NREP", NREP);
        context__.validate_dims("parameter initialization", "pel_scale_factor", "double", context__.to_vec(NCON,NREP));
        std::vector<std::vector<double> > pel_scale_factor(NCON, std::vector<double>(NREP, double(0)));
        size_t pel_scale_factor_k_0_max__ = NCON;
        size_t pel_scale_factor_k_1_max__ = NREP;
        for (size_t k_1__ = 0; k_1__ < pel_scale_factor_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < pel_scale_factor_k_0_max__; ++k_0__) {
                pel_scale_factor[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t pel_scale_factor_i_0_max__ = NCON;
        size_t pel_scale_factor_i_1_max__ = NREP;
        for (size_t i_0__ = 0; i_0__ < pel_scale_factor_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < pel_scale_factor_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_unconstrain(pel_scale_factor[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pel_scale_factor: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 31;
        if (!(context__.contains_r("gene_count_condition")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gene_count_condition missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gene_count_condition");
        pos__ = 0U;
        validate_non_negative_index("gene_count_condition", "NRNA", NRNA);
        validate_non_negative_index("gene_count_condition", "NCON", NCON);
        context__.validate_dims("parameter initialization", "gene_count_condition", "vector_d", context__.to_vec(NCON,NRNA));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > gene_count_condition(NCON, Eigen::Matrix<double, Eigen::Dynamic, 1>(NRNA));
        size_t gene_count_condition_j_1_max__ = NRNA;
        size_t gene_count_condition_k_0_max__ = NCON;
        for (size_t j_1__ = 0; j_1__ < gene_count_condition_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < gene_count_condition_k_0_max__; ++k_0__) {
                gene_count_condition[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t gene_count_condition_i_0_max__ = NCON;
        for (size_t i_0__ = 0; i_0__ < gene_count_condition_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(gene_count_condition[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gene_count_condition: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("pel_count_condition")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pel_count_condition missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pel_count_condition");
        pos__ = 0U;
        validate_non_negative_index("pel_count_condition", "NRNA", NRNA);
        validate_non_negative_index("pel_count_condition", "NCON", NCON);
        context__.validate_dims("parameter initialization", "pel_count_condition", "vector_d", context__.to_vec(NCON,NRNA));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > pel_count_condition(NCON, Eigen::Matrix<double, Eigen::Dynamic, 1>(NRNA));
        size_t pel_count_condition_j_1_max__ = NRNA;
        size_t pel_count_condition_k_0_max__ = NCON;
        for (size_t j_1__ = 0; j_1__ < pel_count_condition_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pel_count_condition_k_0_max__; ++k_0__) {
                pel_count_condition[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t pel_count_condition_i_0_max__ = NCON;
        for (size_t i_0__ = 0; i_0__ < pel_count_condition_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(pel_count_condition[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pel_count_condition: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("norm_alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable norm_alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("norm_alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "norm_alpha", "double", context__.to_vec());
        double norm_alpha(0);
        norm_alpha = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(norm_alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable norm_alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("norm_beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable norm_beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("norm_beta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "norm_beta", "double", context__.to_vec());
        double norm_beta(0);
        norm_beta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, norm_beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable norm_beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 39;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "3", 3);
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec(3));
        std::vector<double> phi(3, double(0));
        size_t phi_k_0_max__ = 3;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            phi[k_0__] = vals_r__[pos__++];
        }
        size_t phi_i_0_max__ = 3;
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 25;
            local_scalar_t__ scale_factor_mean;
            (void) scale_factor_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                scale_factor_mean = in__.scalar_constrain(lp__);
            else
                scale_factor_mean = in__.scalar_constrain();
            current_statement_begin__ = 26;
            std::vector<std::vector<local_scalar_t__> > tot_scale_factor;
            size_t tot_scale_factor_d_0_max__ = NCON;
            size_t tot_scale_factor_d_1_max__ = NREP;
            tot_scale_factor.resize(tot_scale_factor_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < tot_scale_factor_d_0_max__; ++d_0__) {
                tot_scale_factor[d_0__].reserve(tot_scale_factor_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < tot_scale_factor_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        tot_scale_factor[d_0__].push_back(in__.scalar_lb_constrain(0, lp__));
                    else
                        tot_scale_factor[d_0__].push_back(in__.scalar_lb_constrain(0));
                }
            }
            current_statement_begin__ = 27;
            std::vector<std::vector<local_scalar_t__> > sup_scale_factor;
            size_t sup_scale_factor_d_0_max__ = NCON;
            size_t sup_scale_factor_d_1_max__ = NREP;
            sup_scale_factor.resize(sup_scale_factor_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sup_scale_factor_d_0_max__; ++d_0__) {
                sup_scale_factor[d_0__].reserve(sup_scale_factor_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < sup_scale_factor_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        sup_scale_factor[d_0__].push_back(in__.scalar_constrain(lp__));
                    else
                        sup_scale_factor[d_0__].push_back(in__.scalar_constrain());
                }
            }
            current_statement_begin__ = 28;
            std::vector<std::vector<local_scalar_t__> > pel_scale_factor;
            size_t pel_scale_factor_d_0_max__ = NCON;
            size_t pel_scale_factor_d_1_max__ = NREP;
            pel_scale_factor.resize(pel_scale_factor_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < pel_scale_factor_d_0_max__; ++d_0__) {
                pel_scale_factor[d_0__].reserve(pel_scale_factor_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < pel_scale_factor_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        pel_scale_factor[d_0__].push_back(in__.scalar_constrain(lp__));
                    else
                        pel_scale_factor[d_0__].push_back(in__.scalar_constrain());
                }
            }
            current_statement_begin__ = 31;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > gene_count_condition;
            size_t gene_count_condition_d_0_max__ = NCON;
            gene_count_condition.reserve(gene_count_condition_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gene_count_condition_d_0_max__; ++d_0__) {
                if (jacobian__)
                    gene_count_condition.push_back(in__.vector_constrain(NRNA, lp__));
                else
                    gene_count_condition.push_back(in__.vector_constrain(NRNA));
            }
            current_statement_begin__ = 32;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > pel_count_condition;
            size_t pel_count_condition_d_0_max__ = NCON;
            pel_count_condition.reserve(pel_count_condition_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < pel_count_condition_d_0_max__; ++d_0__) {
                if (jacobian__)
                    pel_count_condition.push_back(in__.vector_constrain(NRNA, lp__));
                else
                    pel_count_condition.push_back(in__.vector_constrain(NRNA));
            }
            current_statement_begin__ = 35;
            local_scalar_t__ norm_alpha;
            (void) norm_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                norm_alpha = in__.scalar_constrain(lp__);
            else
                norm_alpha = in__.scalar_constrain();
            current_statement_begin__ = 36;
            local_scalar_t__ norm_beta;
            (void) norm_beta;  // dummy to suppress unused var warning
            if (jacobian__)
                norm_beta = in__.scalar_lb_constrain(0, lp__);
            else
                norm_beta = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 39;
            std::vector<local_scalar_t__> phi;
            size_t phi_d_0_max__ = 3;
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    phi.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 44;
            validate_non_negative_index("sup_latent", "NRNA", NRNA);
            validate_non_negative_index("sup_latent", "NCON", NCON);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > sup_latent(NCON, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(NRNA));
            stan::math::initialize(sup_latent, DUMMY_VAR__);
            stan::math::fill(sup_latent, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("pel_latent", "NRNA", NRNA);
            validate_non_negative_index("pel_latent", "NCON", NCON);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > pel_latent(NCON, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(NRNA));
            stan::math::initialize(pel_latent, DUMMY_VAR__);
            stan::math::fill(pel_latent, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 47;
            for (int con = 1; con <= NCON; ++con) {
                current_statement_begin__ = 48;
                stan::model::assign(sup_latent, 
                            stan::model::cons_list(stan::model::index_uni(con), stan::model::nil_index_list()), 
                            get_base1(gene_count_condition, con, "gene_count_condition", 1), 
                            "assigning variable sup_latent");
                current_statement_begin__ = 50;
                stan::model::assign(pel_latent, 
                            stan::model::cons_list(stan::model::index_uni(con), stan::model::nil_index_list()), 
                            add(get_base1(sup_latent, con, "sup_latent", 1), get_base1(pel_count_condition, con, "pel_count_condition", 1)), 
                            "assigning variable pel_latent");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 44;
            size_t sup_latent_k_0_max__ = NCON;
            size_t sup_latent_j_1_max__ = NRNA;
            for (size_t k_0__ = 0; k_0__ < sup_latent_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < sup_latent_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(sup_latent[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: sup_latent" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sup_latent: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 45;
            size_t pel_latent_k_0_max__ = NCON;
            size_t pel_latent_j_1_max__ = NRNA;
            for (size_t k_0__ = 0; k_0__ < pel_latent_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < pel_latent_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(pel_latent[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: pel_latent" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pel_latent: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 56;
            lp_accum__.add(normal_log<propto__>(norm_alpha, 7, 2));
            current_statement_begin__ = 57;
            lp_accum__.add(normal_log<propto__>(norm_beta, 2, 1));
            current_statement_begin__ = 59;
            for (int con = 1; con <= NCON; ++con) {
                current_statement_begin__ = 62;
                lp_accum__.add(normal_log<propto__>(scale_factor_mean, 0, 0.5));
                current_statement_begin__ = 63;
                lp_accum__.add(normal_log<propto__>(get_base1(tot_scale_factor, con, "tot_scale_factor", 1), 10, 0.1));
                current_statement_begin__ = 64;
                lp_accum__.add(normal_log<propto__>(get_base1(pel_scale_factor, con, "pel_scale_factor", 1), scale_factor_mean, 0.1));
                current_statement_begin__ = 65;
                lp_accum__.add(normal_log<propto__>(get_base1(sup_scale_factor, con, "sup_scale_factor", 1), scale_factor_mean, 0.1));
                current_statement_begin__ = 68;
                lp_accum__.add(normal_log<propto__>(phi, 100, 10));
                current_statement_begin__ = 71;
                lp_accum__.add(normal_log<propto__>(get_base1(gene_count_condition, con, "gene_count_condition", 1), norm_alpha, norm_beta));
                current_statement_begin__ = 72;
                lp_accum__.add(normal_log<propto__>(get_base1(pel_count_condition, con, "pel_count_condition", 1), 0, 1));
                current_statement_begin__ = 75;
                for (int rep = 1; rep <= NREP; ++rep) {
                    current_statement_begin__ = 77;
                    lp_accum__.add(neg_binomial_2_log_log<propto__>(get_base1(get_base1(sup_obs, con, "sup_obs", 1), rep, "sup_obs", 2), add(get_base1(get_base1(sup_scale_factor, con, "sup_scale_factor", 1), rep, "sup_scale_factor", 2), get_base1(sup_latent, con, "sup_latent", 1)), get_base1(phi, 2, "phi", 1)));
                    current_statement_begin__ = 80;
                    lp_accum__.add(neg_binomial_2_log_log<propto__>(get_base1(get_base1(pel_obs, con, "pel_obs", 1), rep, "pel_obs", 2), add(get_base1(get_base1(pel_scale_factor, con, "pel_scale_factor", 1), rep, "pel_scale_factor", 2), get_base1(pel_latent, con, "pel_latent", 1)), get_base1(phi, 3, "phi", 1)));
                    current_statement_begin__ = 84;
                    lp_accum__.add(neg_binomial_2_log<propto__>(get_base1(get_base1(tot_obs, con, "tot_obs", 1), rep, "tot_obs", 2), multiply(get_base1(get_base1(tot_scale_factor, con, "tot_scale_factor", 1), rep, "tot_scale_factor", 2), add(stan::math::exp(get_base1(pel_latent, con, "pel_latent", 1)), stan::math::exp(get_base1(sup_latent, con, "sup_latent", 1)))), get_base1(phi, 1, "phi", 1)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("scale_factor_mean");
        names__.push_back("tot_scale_factor");
        names__.push_back("sup_scale_factor");
        names__.push_back("pel_scale_factor");
        names__.push_back("gene_count_condition");
        names__.push_back("pel_count_condition");
        names__.push_back("norm_alpha");
        names__.push_back("norm_beta");
        names__.push_back("phi");
        names__.push_back("sup_latent");
        names__.push_back("pel_latent");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NCON);
        dims__.push_back(NREP);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NCON);
        dims__.push_back(NREP);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NCON);
        dims__.push_back(NREP);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NCON);
        dims__.push_back(NRNA);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NCON);
        dims__.push_back(NRNA);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NCON);
        dims__.push_back(NRNA);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NCON);
        dims__.push_back(NRNA);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_DiffFracSeq_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double scale_factor_mean = in__.scalar_constrain();
        vars__.push_back(scale_factor_mean);
        std::vector<std::vector<double> > tot_scale_factor;
        size_t tot_scale_factor_d_0_max__ = NCON;
        size_t tot_scale_factor_d_1_max__ = NREP;
        tot_scale_factor.resize(tot_scale_factor_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < tot_scale_factor_d_0_max__; ++d_0__) {
            tot_scale_factor[d_0__].reserve(tot_scale_factor_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < tot_scale_factor_d_1_max__; ++d_1__) {
                tot_scale_factor[d_0__].push_back(in__.scalar_lb_constrain(0));
            }
        }
        size_t tot_scale_factor_k_0_max__ = NCON;
        size_t tot_scale_factor_k_1_max__ = NREP;
        for (size_t k_1__ = 0; k_1__ < tot_scale_factor_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < tot_scale_factor_k_0_max__; ++k_0__) {
                vars__.push_back(tot_scale_factor[k_0__][k_1__]);
            }
        }
        std::vector<std::vector<double> > sup_scale_factor;
        size_t sup_scale_factor_d_0_max__ = NCON;
        size_t sup_scale_factor_d_1_max__ = NREP;
        sup_scale_factor.resize(sup_scale_factor_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sup_scale_factor_d_0_max__; ++d_0__) {
            sup_scale_factor[d_0__].reserve(sup_scale_factor_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < sup_scale_factor_d_1_max__; ++d_1__) {
                sup_scale_factor[d_0__].push_back(in__.scalar_constrain());
            }
        }
        size_t sup_scale_factor_k_0_max__ = NCON;
        size_t sup_scale_factor_k_1_max__ = NREP;
        for (size_t k_1__ = 0; k_1__ < sup_scale_factor_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < sup_scale_factor_k_0_max__; ++k_0__) {
                vars__.push_back(sup_scale_factor[k_0__][k_1__]);
            }
        }
        std::vector<std::vector<double> > pel_scale_factor;
        size_t pel_scale_factor_d_0_max__ = NCON;
        size_t pel_scale_factor_d_1_max__ = NREP;
        pel_scale_factor.resize(pel_scale_factor_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < pel_scale_factor_d_0_max__; ++d_0__) {
            pel_scale_factor[d_0__].reserve(pel_scale_factor_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < pel_scale_factor_d_1_max__; ++d_1__) {
                pel_scale_factor[d_0__].push_back(in__.scalar_constrain());
            }
        }
        size_t pel_scale_factor_k_0_max__ = NCON;
        size_t pel_scale_factor_k_1_max__ = NREP;
        for (size_t k_1__ = 0; k_1__ < pel_scale_factor_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < pel_scale_factor_k_0_max__; ++k_0__) {
                vars__.push_back(pel_scale_factor[k_0__][k_1__]);
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > gene_count_condition;
        size_t gene_count_condition_d_0_max__ = NCON;
        gene_count_condition.reserve(gene_count_condition_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gene_count_condition_d_0_max__; ++d_0__) {
            gene_count_condition.push_back(in__.vector_constrain(NRNA));
        }
        size_t gene_count_condition_j_1_max__ = NRNA;
        size_t gene_count_condition_k_0_max__ = NCON;
        for (size_t j_1__ = 0; j_1__ < gene_count_condition_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < gene_count_condition_k_0_max__; ++k_0__) {
                vars__.push_back(gene_count_condition[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > pel_count_condition;
        size_t pel_count_condition_d_0_max__ = NCON;
        pel_count_condition.reserve(pel_count_condition_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < pel_count_condition_d_0_max__; ++d_0__) {
            pel_count_condition.push_back(in__.vector_constrain(NRNA));
        }
        size_t pel_count_condition_j_1_max__ = NRNA;
        size_t pel_count_condition_k_0_max__ = NCON;
        for (size_t j_1__ = 0; j_1__ < pel_count_condition_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pel_count_condition_k_0_max__; ++k_0__) {
                vars__.push_back(pel_count_condition[k_0__](j_1__));
            }
        }
        double norm_alpha = in__.scalar_constrain();
        vars__.push_back(norm_alpha);
        double norm_beta = in__.scalar_lb_constrain(0);
        vars__.push_back(norm_beta);
        std::vector<double> phi;
        size_t phi_d_0_max__ = 3;
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.scalar_lb_constrain(0));
        }
        size_t phi_k_0_max__ = 3;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 44;
            validate_non_negative_index("sup_latent", "NRNA", NRNA);
            validate_non_negative_index("sup_latent", "NCON", NCON);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > sup_latent(NCON, Eigen::Matrix<double, Eigen::Dynamic, 1>(NRNA));
            stan::math::initialize(sup_latent, DUMMY_VAR__);
            stan::math::fill(sup_latent, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("pel_latent", "NRNA", NRNA);
            validate_non_negative_index("pel_latent", "NCON", NCON);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > pel_latent(NCON, Eigen::Matrix<double, Eigen::Dynamic, 1>(NRNA));
            stan::math::initialize(pel_latent, DUMMY_VAR__);
            stan::math::fill(pel_latent, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 47;
            for (int con = 1; con <= NCON; ++con) {
                current_statement_begin__ = 48;
                stan::model::assign(sup_latent, 
                            stan::model::cons_list(stan::model::index_uni(con), stan::model::nil_index_list()), 
                            get_base1(gene_count_condition, con, "gene_count_condition", 1), 
                            "assigning variable sup_latent");
                current_statement_begin__ = 50;
                stan::model::assign(pel_latent, 
                            stan::model::cons_list(stan::model::index_uni(con), stan::model::nil_index_list()), 
                            add(get_base1(sup_latent, con, "sup_latent", 1), get_base1(pel_count_condition, con, "pel_count_condition", 1)), 
                            "assigning variable pel_latent");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t sup_latent_j_1_max__ = NRNA;
                size_t sup_latent_k_0_max__ = NCON;
                for (size_t j_1__ = 0; j_1__ < sup_latent_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < sup_latent_k_0_max__; ++k_0__) {
                        vars__.push_back(sup_latent[k_0__](j_1__));
                    }
                }
                size_t pel_latent_j_1_max__ = NRNA;
                size_t pel_latent_k_0_max__ = NCON;
                for (size_t j_1__ = 0; j_1__ < pel_latent_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < pel_latent_k_0_max__; ++k_0__) {
                        vars__.push_back(pel_latent[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_DiffFracSeq";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_factor_mean";
        param_names__.push_back(param_name_stream__.str());
        size_t tot_scale_factor_k_0_max__ = NCON;
        size_t tot_scale_factor_k_1_max__ = NREP;
        for (size_t k_1__ = 0; k_1__ < tot_scale_factor_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < tot_scale_factor_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tot_scale_factor" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sup_scale_factor_k_0_max__ = NCON;
        size_t sup_scale_factor_k_1_max__ = NREP;
        for (size_t k_1__ = 0; k_1__ < sup_scale_factor_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < sup_scale_factor_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sup_scale_factor" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t pel_scale_factor_k_0_max__ = NCON;
        size_t pel_scale_factor_k_1_max__ = NREP;
        for (size_t k_1__ = 0; k_1__ < pel_scale_factor_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < pel_scale_factor_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pel_scale_factor" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t gene_count_condition_j_1_max__ = NRNA;
        size_t gene_count_condition_k_0_max__ = NCON;
        for (size_t j_1__ = 0; j_1__ < gene_count_condition_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < gene_count_condition_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gene_count_condition" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t pel_count_condition_j_1_max__ = NRNA;
        size_t pel_count_condition_k_0_max__ = NCON;
        for (size_t j_1__ = 0; j_1__ < pel_count_condition_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pel_count_condition_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pel_count_condition" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "norm_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "norm_beta";
        param_names__.push_back(param_name_stream__.str());
        size_t phi_k_0_max__ = 3;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t sup_latent_j_1_max__ = NRNA;
            size_t sup_latent_k_0_max__ = NCON;
            for (size_t j_1__ = 0; j_1__ < sup_latent_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < sup_latent_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sup_latent" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t pel_latent_j_1_max__ = NRNA;
            size_t pel_latent_k_0_max__ = NCON;
            for (size_t j_1__ = 0; j_1__ < pel_latent_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < pel_latent_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pel_latent" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_factor_mean";
        param_names__.push_back(param_name_stream__.str());
        size_t tot_scale_factor_k_0_max__ = NCON;
        size_t tot_scale_factor_k_1_max__ = NREP;
        for (size_t k_1__ = 0; k_1__ < tot_scale_factor_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < tot_scale_factor_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tot_scale_factor" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sup_scale_factor_k_0_max__ = NCON;
        size_t sup_scale_factor_k_1_max__ = NREP;
        for (size_t k_1__ = 0; k_1__ < sup_scale_factor_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < sup_scale_factor_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sup_scale_factor" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t pel_scale_factor_k_0_max__ = NCON;
        size_t pel_scale_factor_k_1_max__ = NREP;
        for (size_t k_1__ = 0; k_1__ < pel_scale_factor_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < pel_scale_factor_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pel_scale_factor" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t gene_count_condition_j_1_max__ = NRNA;
        size_t gene_count_condition_k_0_max__ = NCON;
        for (size_t j_1__ = 0; j_1__ < gene_count_condition_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < gene_count_condition_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gene_count_condition" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t pel_count_condition_j_1_max__ = NRNA;
        size_t pel_count_condition_k_0_max__ = NCON;
        for (size_t j_1__ = 0; j_1__ < pel_count_condition_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pel_count_condition_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pel_count_condition" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "norm_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "norm_beta";
        param_names__.push_back(param_name_stream__.str());
        size_t phi_k_0_max__ = 3;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t sup_latent_j_1_max__ = NRNA;
            size_t sup_latent_k_0_max__ = NCON;
            for (size_t j_1__ = 0; j_1__ < sup_latent_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < sup_latent_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sup_latent" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t pel_latent_j_1_max__ = NRNA;
            size_t pel_latent_k_0_max__ = NCON;
            for (size_t j_1__ = 0; j_1__ < pel_latent_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < pel_latent_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pel_latent" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_DiffFracSeq_namespace::model_DiffFracSeq stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
